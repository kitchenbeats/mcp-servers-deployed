# FastMCP Wrapper Dockerfile for MCP Everything Server
# This wraps the original server WITHOUT modifying it

FROM node:20-slim

WORKDIR /app

# Copy the original server code (unchanged)
COPY package*.json ./
COPY tsconfig.json ./
COPY *.ts ./
COPY instructions.md ./

# Install dependencies and build
RUN npm ci && npm run build

# Create FastMCP wrapper
RUN mkdir -p /app/fastmcp-wrapper

# Create the FastMCP HTTP wrapper
RUN cat > /app/fastmcp-wrapper/server.js << 'EOF'
const express = require('express');
const { spawn } = require('child_process');
const app = express();

app.use(express.json());

// CORS headers
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  next();
});

// JWT validation middleware
app.use((req, res, next) => {
  if (process.env.REQUIRE_JWT === 'true') {
    const authHeader = req.headers.authorization;
    const token = authHeader?.replace('Bearer ', '');
    
    if (!token || !token.startsWith('mcp_jwt_')) {
      return res.status(401).json({
        jsonrpc: '2.0',
        error: {
          code: -32001,
          message: 'Unauthorized - Invalid or missing JWT token'
        },
        id: null
      });
    }
    // In production, verify JWT properly
  }
  next();
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'mcp-everything-server',
    version: '1.0.0'
  });
});

// Proxy to the original streamableHttp server
let originalServer;

async function startOriginalServer() {
  return new Promise((resolve, reject) => {
    originalServer = spawn('node', ['dist/streamableHttp.js'], {
      env: { ...process.env, PORT: '3001' },
      stdio: ['pipe', 'pipe', 'pipe']
    });
    
    originalServer.stderr.on('data', (data) => {
      const output = data.toString();
      console.error('Original server:', output);
      if (output.includes('Server running')) {
        resolve();
      }
    });
    
    originalServer.on('error', reject);
  });
}

// Proxy MCP requests to original server
app.post('/mcp', async (req, res) => {
  try {
    const proxyRes = await fetch('http://localhost:3001/mcp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...req.headers
      },
      body: JSON.stringify(req.body)
    });
    
    const data = await proxyRes.json();
    res.status(proxyRes.status).json(data);
  } catch (error) {
    console.error('Proxy error:', error);
    res.status(502).json({
      jsonrpc: '2.0',
      error: {
        code: -32603,
        message: 'Proxy error',
        data: error.message
      },
      id: null
    });
  }
});

// Start servers
const PORT = process.env.PORT || 8080;

startOriginalServer()
  .then(() => {
    app.listen(PORT, () => {
      console.log(`FastMCP wrapper listening on port ${PORT}`);
      console.log(`Original server running on port 3001`);
    });
  })
  .catch((error) => {
    console.error('Failed to start original server:', error);
    process.exit(1);
  });
EOF

# Set the entrypoint to our wrapper
EXPOSE 8080
CMD ["node", "/app/fastmcp-wrapper/server.js"]